@model IEnumerable<StudentAssistPlatform.Controllers.CalenderController.CalenderTask>

<style>
    .calendar {
        display: grid;
        grid-template-columns: repeat(7, 1fr);
        gap: 1rem;
    }

    .calendar-day {
        border: 1px solid #ddd;
        border-radius: 5px;
        padding: 10px;
        height: auto;
        overflow-y: auto;
        background-color: #f9f9f9;
    }

        .calendar-day h5 {
            margin: 0 0 5px;
            font-size: 14px;
        }

    .task-link {
        display: block;
        margin-bottom: 5px;
        font-size: 12px;
        color: #007bff;
    }
</style>

<div class="container mt-5">
    <h1 class="text-center">Daily Learning Flow</h1>
    <hr />
    <div id="calendar" class="calendar"></div>
</div>

<script src="https://code.jquery.com/jquery-3.6.4.min.js"></script>

    @section scripts{
    <script>
        // Inject tasks from the model into the JavaScript array
        const tasks = @Html.Raw(Json.Serialize(Model));

        function initCalendar(month, year) {
            const daysInMonth = new Date(year, month + 1, 0).getDate();
            const firstDay = new Date(year, month, 1).getDay();

                const calendar = $("#calendar");
            calendar.empty();

                // Add empty slots for days before the 1st
            for (let i = 0; i < firstDay; i++) {
                calendar.append('<div class="calendar-day"></div>');
                }

                // Populate the calendar days
            for (let day = 1; day <= daysInMonth; day++) {
                const date = `${year}-${String(month + 1).padStart(2, "0")}-${String(day).padStart(2, "0")}`;
                const dayTasks = tasks.filter(task => task.date === date);

                    let dayHtml = `<div class="calendar-day">
                    <h5>${day}</h5>`;

                    dayTasks.forEach(task => {
                    dayHtml += `
                        <strong>${task.title}</strong>
                            <ul>
                                ${task.resources.split('\n').map(r => `<li>${r}</li>`).join("")}
                        </ul>
                            <p><strong>Assessment Question:</strong> ${task.assessmentQuestion}</p>
                        <p><strong>Recall Prompt:</strong> ${task.recallPrompt}</p>
                    <a href="/Calender/resources?Subject=${encodeURIComponent(task.subject)}&Topic=${encodeURIComponent(task.topic)}&Resources=${encodeURIComponent(task.resources)}&CreatedAt=${encodeURIComponent(task.createdAt)}"
       class="task-link" target="_blank">
        View Resources and Start
    </a>

                    `;
                });

                dayHtml += "</div>";
                calendar.append(dayHtml);
            }
            }

            // Initialize calendar with the current month
            const today = new Date();
            initCalendar(today.getMonth(), today.getFullYear());
    </script>
    }