@model LearningSession

@{
    ViewData["Title"] = "Active Recall Practice";
}

<style>
    :root {
        --primary-blue: #1a237e;
        --light-purple: #f3f4ff;
        --card-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
    }

    body {
        font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, sans-serif;
        margin: 0;
        padding: 20px;
        background: #f8f9fe;
    }

    .practice-container {
        display: grid;
        grid-template-columns: 300px 1fr;
        gap: 20px;
        max-width: 1200px;
        margin: 0 auto;
        min-height: 600px;
    }

    .recorder-section, .feedback-section {
        background: white;
        border-radius: 12px;
        padding: 20px;
        box-shadow: var(--card-shadow);
    }

    .record-button {
        width: 60px;
        height: 60px;
        border-radius: 50%;
        background: #dc2626;
        border: none;
        color: white;
        cursor: pointer;
        margin: 20px auto;
        display: flex;
        align-items: center;
        justify-content: center;
        transition: all 0.3s ease;
    }

    .record-button:hover {
        transform: scale(1.1);
    }

    .record-button.recording {
        animation: pulse 1.5s infinite;
    }

    .transcript-area {
        flex: 1;
        border: 1px solid #e0e0e0;
        border-radius: 8px;
        padding: 15px;
        margin-top: 15px;
        background: #f8f9fe;
        min-height: 200px;
        overflow-y: auto;
    }

    .status-indicator {
        display: flex;
        align-items: center;
        gap: 8px;
        color: #666;
        font-size: 0.9rem;
        margin-bottom: 15px;
    }

    .status-dot {
        width: 8px;
        height: 8px;
        border-radius: 50%;
    }

    .metrics {
        display: grid;
        grid-template-columns: repeat(2, 1fr);
        gap: 15px;
        margin-top: 20px;
    }

    .metric-card {
        background: #f8f9fe;
        padding: 15px;
        border-radius: 8px;
        text-align: center;
    }

    .metric-value {
        font-size: 1.5rem;
        font-weight: bold;
        color: var(--primary-blue);
    }

    .metric-label {
        font-size: 0.9rem;
        color: #666;
    }

    .tutor-message {
        display: flex;
        gap: 15px;
        margin-bottom: 20px;
    }

    .tutor-avatar {
        width: 40px;
        height: 40px;
        border-radius: 50%;
        background: var(--light-purple);
    }

    .message-content {
        flex: 1;
        background: var(--light-purple);
        padding: 15px;
        border-radius: 12px;
        position: relative;
    }

    .message-content::before {
        content: '';
        position: absolute;
        left: -8px;
        top: 15px;
        width: 0;
        height: 0;
        border-top: 8px solid transparent;
        border-bottom: 8px solid transparent;
        border-right: 8px solid var(--light-purple);
    }
</style>

<div class="practice-container">
    <!-- Recording Section -->
    <div class="recorder-section">
        <h3>Speech Recording</h3>
        <div class="status-indicator">
            <span class="status-dot" style="background: #22c55e;"></span>
            Ready to record
        </div>
        <button class="record-button" id="recordButton">
            <svg width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                <circle cx="12" cy="12" r="6"></circle>
            </svg>
        </button>
        <audio id="audioPlay" controls></audio>
        <div class="transcript-area">
            <p>Your speech will be transcribed here in real-time...</p>
        </div>
        <div class="metrics">
            <div class="metric-card">
                <div class="metric-value">120</div>
                <div class="metric-label">Words/min</div>
            </div>
            <div class="metric-card">
                <div class="metric-value">2:30</div>
                <div class="metric-label">Duration</div>
            </div>
        </div>
    </div>

    <!-- Feedback Section -->
    <div class="feedback-section">
        <h2>AI Tutor Feedback</h2>
        <div class="tutor-message">
            <div class="tutor-avatar"></div>
            <div class="message-content">
                <p>I'll analyze your presentation in real-time and provide feedback on:</p>
                <ul>
                    <li>Speaking pace and clarity</li>
                    <li>Voice modulation</li>
                    <li>Content structure</li>
                    <li>Key points coverage</li>
                    <li>Engagement level</li>
                </ul>
                <p>Click the record button when you're ready to start your presentation.</p>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <script>
        let isRecording = false;
        let mediaRecorder;
        let recordedChunks = [];

        const audioConstraints = { audio: true };
        const recordButton = document.querySelector('#recordButton');
        const statusIndicator = document.querySelector('.status-indicator');
        const audioPlayer = document.getElementById('audioPlay');

        recordButton.addEventListener('click', () => {
            isRecording = !isRecording;
            recordButton.classList.toggle('recording');
            updateStatus(isRecording ? 'Recording...' : 'Ready to record', isRecording ? '#dc2626' : '#22c55e');
            if (isRecording) startRecording();
            else stopRecording();
        });

        function startRecording() {
            navigator.mediaDevices.getUserMedia(audioConstraints).then((stream) => {
                audioPlayer.srcObject = stream;
                audioPlayer.play();

                mediaRecorder = new MediaRecorder(stream);
                mediaRecorder.ondataavailable = (event) => recordedChunks.push(event.data);
                mediaRecorder.onstop = saveRecording;
                mediaRecorder.start();
            });
        }

        function stopRecording() {
            if (mediaRecorder.state === 'recording') mediaRecorder.stop();
        }

        function saveRecording() {
            const audioBlob = new Blob(recordedChunks, { type: 'audio/webm' });
            const reader = new FileReader();
            reader.readAsDataURL(audioBlob);
            reader.onloadend = () => {
                const voiceData = {
                    Subject: "@Model.Subject",
                    Topic: "@Model.Topic",
                    StudentExplanation: "",
                    AIFeedback: "",
                    CreatedAt: new Date().toISOString(),
                    AudioBase64: reader.result.split(',')[1]
                };
                fetch('/StudyTips/GiveFeedback', {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify(voiceData)
                }).then(response => response.json())
                  .then(data => displayFeedback(data));
            };
        }

        function displayFeedback(data) {
            const transcriptArea = document.querySelector('.transcript-area');
            transcriptArea.innerHTML = `<h4>Transcription:</h4><p>${data.transcription}</p>`;
        }

        function updateStatus(message, color) {
            statusIndicator.innerHTML = `<span class="status-dot" style="background: ${color};"></span> ${message}`;
        }
    </script>
}
