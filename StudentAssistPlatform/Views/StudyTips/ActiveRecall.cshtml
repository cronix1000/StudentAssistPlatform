<style>
    :root {
        --primary-blue: #1a237e;
        --light-purple: #f3f4ff;
        --card-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
    }

    body {
        font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, sans-serif;
        margin: 0;
        padding: 20px;
        background: #f8f9fe;
    }

    .practice-container {
        display: grid;
        grid-template-columns: 300px 1fr;
        gap: 20px;
        max-width: 1200px;
        margin: 0 auto;
        min-height: 600px;
    }

    .recorder-section {
        background: white;
        border-radius: 12px;
        padding: 20px;
        box-shadow: var(--card-shadow);
        display: flex;
        flex-direction: column;
    }

    .record-button {
        width: 60px;
        height: 60px;
        border-radius: 50%;
        background: #dc2626;
        border: none;
        color: white;
        cursor: pointer;
        margin: 20px auto;
        display: flex;
        align-items: center;
        justify-content: center;
        transition: all 0.3s ease;
    }

        .record-button:hover {
            transform: scale(1.1);
        }

        .record-button.recording {
            animation: pulse 1.5s infinite;
        }

    .transcript-area {
        flex: 1;
        border: 1px solid #e0e0e0;
        border-radius: 8px;
        padding: 15px;
        margin-top: 15px;
        background: #f8f9fe;
        min-height: 200px;
        overflow-y: auto;
    }

    .feedback-section {
        background: white;
        border-radius: 12px;
        padding: 30px;
        box-shadow: var(--card-shadow);
    }

    .tutor-message {
        display: flex;
        gap: 15px;
        margin-bottom: 20px;
    }

    .tutor-avatar {
        width: 40px;
        height: 40px;
        border-radius: 50%;
        background: var(--light-purple);
    }

    .message-content {
        flex: 1;
        background: var(--light-purple);
        padding: 15px;
        border-radius: 12px;
        position: relative;
    }

        .message-content::before {
            content: '';
            position: absolute;
            left: -8px;
            top: 15px;
            width: 0;
            height: 0;
            border-top: 8px solid transparent;
            border-bottom: 8px solid transparent;
            border-right: 8px solid var(--light-purple);
        }

    .status-indicator {
        display: flex;
        align-items: center;
        gap: 8px;
        color: #666;
        font-size: 0.9rem;
        margin-bottom: 15px;
    }

    .status-dot {
        width: 8px;
        height: 8px;
        border-radius: 50%;
        background: #22c55e;
    }

    .timer {
        font-size: 1.2rem;
        color: #666;
        text-align: center;
        margin: 10px 0;
    }

    .metrics {
        display: grid;
        grid-template-columns: repeat(2, 1fr);
        gap: 15px;
        margin-top: 20px;
    }

    .metric-card {
        background: #f8f9fe;
        padding: 15px;
        border-radius: 8px;
        text-align: center;
    }

    .metric-value {
        font-size: 1.5rem;
        font-weight: bold;
        color: var(--primary-blue);
    }

    .metric-label {
        font-size: 0.9rem;
        color: #666;
    }
</style>
<div class="practice-container">
    <!-- Recording Section -->
    <div class="recorder-section">
        <h3>Speech Recording</h3>
        <div class="status-indicator">
            <span class="status-dot"></span>
            Ready to record
        </div>
        <button class="record-button" id="recordButton">
            <svg width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                <circle cx="12" cy="12" r="6"></circle>
            </svg>
        </button>
        <div class="status-indicator"></div>
        <audio id="audioPlay" controls></audio>

        <div class="timer">00:00</div>
        <div class="transcript-area">
            <p>Your speech will be transcribed here in real-time...</p>
        </div>
        <div class="metrics">
            <div class="metric-card">
                <div class="metric-value">120</div>
                <div class="metric-label">Words/min</div>
            </div>
            <div class="metric-card">
                <div class="metric-value">2:30</div>
                <div class="metric-label">Duration</div>
            </div>
        </div>
    </div>

    <!-- Feedback Section -->
    <div class="feedback-section">
        <h2>AI Tutor Feedback</h2>
        <div class="tutor-message">
            <div class="tutor-avatar">
                <img src="/api/placeholder/40/40" alt="AI Tutor" />
            </div>
            <div class="message-content">
                <p>I'll analyze your presentation in real-time and provide feedback on:</p>
                <ul>
                    <li>Speaking pace and clarity</li>
                    <li>Voice modulation</li>
                    <li>Content structure</li>
                    <li>Key points coverage</li>
                    <li>Engagement level</li>
                </ul>
                <p>Click the record button when you're ready to start your presentation.</p>
            </div>
        </div>
        <div class="tutor-message">
            <div class="tutor-avatar">
                <img src="/api/placeholder/40/40" alt="AI Tutor" />
            </div>
            <div class="message-content">
                <p>Real-time feedback will appear here as you speak...</p>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <script>

        let isRecording = false

        const audioIN = {
            audio: true
        };

        // Initialize array to store audio data
        let dataArray = [];
        let mediaRecorder;

        const recordButton = document.querySelector('#recordButton'); // Make sure this matches your button's ID

        function uploadVoiceRecording(audioBlob) {
            // Convert blob to base64
            const reader = new FileReader();
            reader.readAsDataURL(audioBlob);

            reader.onloadend = function () {
                // Remove the data URL prefix to get just the base64 string
                const base64Audio = reader.result.split(',')[1];

                const voiceData = {
                    studentId: "current-student-id", // Replace with actual student ID
                    topic: "current-topic", // Replace with actual topic
                    audioBase64: base64Audio
                };

                // Send to server
                fetch('/upload', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                        // Add any authentication headers if needed
                        // 'Authorization': 'Bearer your-token'
                    },
                    body: JSON.stringify(voiceData)
                })
                    .then(response => {
                        if (!response.ok) {
                            throw new Error('Network response was not ok');
                        }
                        return response.json();
                    })
                    .then(data => {
                        console.log('Success:', data);
                        // Handle successful upload
                        showSuccessMessage('Recording uploaded successfully!');
                    })
                    .catch(error => {
                        console.error('Error:', error);
                        // Handle errors
                        showErrorMessage('Failed to upload recording. Please try again.');
                    });
            };
        }

        // Helper functions for UI feedback
        function showSuccessMessage(message) {
            const statusIndicator = document.querySelector('.status-indicator');
            if (statusIndicator) {
                statusIndicator.innerHTML = `
                            <div class="success-message">
                                <span class="status-dot" style="background: #22c55e"></span>
                                ${message}
                            </div>
                        `;
            }
        }

        function showErrorMessage(message) {
            const statusIndicator = document.querySelector('.status-indicator');
            if (statusIndicator) {
                statusIndicator.innerHTML = `
                            <div class="error-message">
                                <span class="status-dot" style="background: #dc2626"></span>
                                ${message}
                            </div>
                        `;
            }
        }

        recordButton.addEventListener('click', () => {
            isRecording = !isRecording;
            recordButton.classList.toggle('recording');

            const statusIndicator = document.querySelector('.status-indicator');
            statusIndicator.innerHTML = `
                        <span class="status-dot" style="background: ${isRecording ? '#dc2626' : '#22c55e'}"></span>
                        ${isRecording ? 'Recording...' : 'Ready to record'}
                    `;

            if (isRecording) {
                startRecording();
            } else {
                stopRecording();
            }
        });

        function startRecording() {
            navigator.mediaDevices.getUserMedia(audioIN)
                .then(function (mediaStreamObj) {
                    let audio = document.querySelector('audio');

                    if ("srcObject" in audio) {
                        audio.srcObject = mediaStreamObj;
                    } else {
                        audio.src = window.URL.createObjectURL(mediaStreamObj);
                    }

                    audio.onloadedmetadata = function (ev) {
                        audio.play();
                    };

                    mediaRecorder = new MediaRecorder(mediaStreamObj);
                    mediaRecorder.start();

                    mediaRecorder.ondataavailable = function (ev) {
                        dataArray.push(ev.data);
                    }
                })
                .catch(function (err) {
                    console.error('Error accessing media devices:', err);
                });
        }

        function stopRecording() {
            if (mediaRecorder && mediaRecorder.state !== 'inactive') {
                mediaRecorder.stop();

                // Process the recorded audio
                mediaRecorder.onstop = function () {
                    const audioBlob = new Blob(dataArray, { 'type': 'audio/mp3' });
                    const audioUrl = URL.createObjectURL(audioBlob);

                    // If you want to play back the recorded audio
                    const playAudio = document.getElementById('audioPlay');
                    if (playAudio) {
                        playAudio.src = audioUrl;
                    }

                    uploadVoiceRecording(audioBlob);

                    // Clear the data array for next recording
                    dataArray = [];
                };
            }
        }
    </script>
}
