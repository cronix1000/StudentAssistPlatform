<style>
    :root {
        --primary-blue: #1a237e;
        --light-purple: #f3f4ff;
        --card-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
    }

    body {
        font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, sans-serif;
        margin: 0;
        padding: 20px;
        background: #f8f9fe;
    }

    .practice-container {
        display: grid;
        grid-template-columns: 300px 1fr;
        gap: 20px;
        max-width: 1200px;
        margin: 0 auto;
        min-height: 600px;
    }

    .recorder-section {
        background: white;
        border-radius: 12px;
        padding: 20px;
        box-shadow: var(--card-shadow);
        display: flex;
        flex-direction: column;
    }

    .record-button {
        width: 60px;
        height: 60px;
        border-radius: 50%;
        background: #dc2626;
        border: none;
        color: white;
        cursor: pointer;
        margin: 20px auto;
        display: flex;
        align-items: center;
        justify-content: center;
        transition: all 0.3s ease;
    }

        .record-button:hover {
            transform: scale(1.1);
        }

        .record-button.recording {
            animation: pulse 1.5s infinite;
        }

    .transcript-area {
        flex: 1;
        border: 1px solid #e0e0e0;
        border-radius: 8px;
        padding: 15px;
        margin-top: 15px;
        background: #f8f9fe;
        min-height: 200px;
        overflow-y: auto;
    }

    .feedback-section {
        background: white;
        border-radius: 12px;
        padding: 30px;
        box-shadow: var(--card-shadow);
    }

    .tutor-message {
        display: flex;
        gap: 15px;
        margin-bottom: 20px;
    }

    .tutor-avatar {
        width: 40px;
        height: 40px;
        border-radius: 50%;
        background: var(--light-purple);
    }

    .message-content {
        flex: 1;
        background: var(--light-purple);
        padding: 15px;
        border-radius: 12px;
        position: relative;
    }

        .message-content::before {
            content: '';
            position: absolute;
            left: -8px;
            top: 15px;
            width: 0;
            height: 0;
            border-top: 8px solid transparent;
            border-bottom: 8px solid transparent;
            border-right: 8px solid var(--light-purple);
        }

    .status-indicator {
        display: flex;
        align-items: center;
        gap: 8px;
        color: #666;
        font-size: 0.9rem;
        margin-bottom: 15px;
    }

    .status-dot {
        width: 8px;
        height: 8px;
        border-radius: 50%;
        background: #22c55e;
    }

    .timer {
        font-size: 1.2rem;
        color: #666;
        text-align: center;
        margin: 10px 0;
    }

    .metrics {
        display: grid;
        grid-template-columns: repeat(2, 1fr);
        gap: 15px;
        margin-top: 20px;
    }

    .metric-card {
        background: #f8f9fe;
        padding: 15px;
        border-radius: 8px;
        text-align: center;
    }

    .metric-value {
        font-size: 1.5rem;
        font-weight: bold;
        color: var(--primary-blue);
    }

    .metric-label {
        font-size: 0.9rem;
        color: #666;
    }
</style>
    <div class="practice-container">
        <!-- Recording Section -->
        <div class="recorder-section">
            <h3>Speech Recording</h3>
            <div class="status-indicator">
                <span class="status-dot"></span>
                Ready to record
            </div>
            <button class="record-button" id="recordButton">
                <svg width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                    <circle cx="12" cy="12" r="6"></circle>
                </svg>
            </button>
            <div class="timer">00:00</div>
            <div class="transcript-area">
                <p>Your speech will be transcribed here in real-time...</p>
            </div>
            <div class="metrics">
                <div class="metric-card">
                    <div class="metric-value">120</div>
                    <div class="metric-label">Words/min</div>
                </div>
                <div class="metric-card">
                    <div class="metric-value">2:30</div>
                    <div class="metric-label">Duration</div>
                </div>
            </div>
        </div>

        <!-- Feedback Section -->
        <div class="feedback-section">
            <h2>AI Tutor Feedback</h2>
            <div class="tutor-message">
                <div class="tutor-avatar">
                    <img src="/api/placeholder/40/40" alt="AI Tutor" />
                </div>
                <div class="message-content">
                    <p>I'll analyze your presentation in real-time and provide feedback on:</p>
                    <ul>
                        <li>Speaking pace and clarity</li>
                        <li>Voice modulation</li>
                        <li>Content structure</li>
                        <li>Key points coverage</li>
                        <li>Engagement level</li>
                    </ul>
                    <p>Click the record button when you're ready to start your presentation.</p>
                </div>
            </div>
            <div class="tutor-message">
                <div class="tutor-avatar">
                    <img src="/api/placeholder/40/40" alt="AI Tutor" />
                </div>
                <div class="message-content">
                    <p>Real-time feedback will appear here as you speak...</p>
                </div>
            </div>
        </div>
    </div>

    <script>
        // Basic recording button toggle
        const recordButton = document.querySelector('.record-button');
        let isRecording = false;

        recordButton.addEventListener('click', () => {
            isRecording = !isRecording;
            recordButton.classList.toggle('recording');
            const statusIndicator = document.querySelector('.status-indicator');
            statusIndicator.innerHTML = `
                                <span class="status-dot" style="background: ${isRecording ? '#dc2626' : '#22c55e'}"></span>
                                ${isRecording ? 'Recording...' : 'Ready to record'}
                            `;
            if (isRecording) {
                startRecording();
            } else {
                stopRecording();
            }

            // Simulate recording

        });

        startRecording()
        {
            navigator.mediaDevices.getUserMedia(audioIN)

                // 'then()' method returns a Promise
                .then(function (mediaStreamObj) {

                    // Connect the media stream to the
                    // first audio element
                    let audio = document.querySelector('audio');
                    //returns the recorded audio via 'audio' tag

                    // 'srcObject' is a property which
                    // takes the media object
                    // This is supported in the newer browsers
                    if ("srcObject" in audio) {
                        audio.srcObject = mediaStreamObj;
                    }
                    else {   // Old version
                        audio.src = window.URL
                            .createObjectURL(mediaStreamObj);
                    }

                    // It will play the audio
                    audio.onloadedmetadata = function (ev) {

                        // Play the audio in the 2nd audio
                        // element what is being recorded
                        audio.play();
                    };

                    // Start record
                    let start = document.getElementById('btnStart');

                    // Stop record
                    let stop = document.getElementById('btnStop');

                    // 2nd audio tag for play the audio
                    let playAudio = document.getElementById('adioPlay');

                    // This is the main thing to recorded
                    // the audio 'MediaRecorder' API
                    let mediaRecorder = new MediaRecorder(mediaStreamObj);
                    // Pass the audio stream

                    // Start event
                    start.addEventListener('click', function (ev) {
                        mediaRecorder.start();
                        // console.log(mediaRecorder.state);
                    })

                    // Stop event
                    stop.addEventListener('click', function (ev) {
                        mediaRecorder.stop();
                        // console.log(mediaRecorder.state);
                    });

                    // If audio data available then push
                    // it to the chunk array
                    mediaRecorder.ondataavailable = function (ev) {
                        dataArray.push(ev.data);
                    }

                    // Chunk array to store the audio data
                    let dataArray = [];

                    // Convert the audio data in to blob
                    // after stopping the recording
                    mediaRecorder.onstop = function (ev) {

                        // blob of type mp3
                        let audioData = new Blob(dataArray,
                            { 'type': 'audio/mp3;' });

                        // After fill up the chunk
                        // array make it empty
                        dataArray = [];

                        // Creating audio url with reference
                        // of created blob named 'audioData'
                        let audioSrc = window.URL
                            .createObjectURL(audioData);

                        // Pass the audio url to the 2nd video tag
                        playAudio.src = audioSrc;
                    }
                }
                
                 oxn

                )
                // If any error occurs then handles the error
                .catch(function (err) {
                    console.log(err.name, err.message);
                });

        }
    </script>
